networks:
  dev:
    driver: bridge

volumes:
  db-data: {}
  shared-volume: {}
  redis-data: {}

services:
  contlollers:
    image: ${DOCKER_REGISTRY-}contlollers
    container_name: api-dev
    build:
      context: .
      dockerfile: contlollers/Dockerfile
    volumes:
      - shared-volume:/shared/volume
    depends_on:
      postgis:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      - ConnectionStrings__DefaultConnection=User ID=${POSTGRES_USER};Password=${POSTGRES_PASSWORD};Host=${POSTGRES_HOST};Port=${POSTGRES_PORT};Database=${POSTGRES_DB};
      - Redis__Host=${REDIS_HOST}
      - Redis__Port=${REDIS_PORT}
      - Mail__Host=mailpit
      - ASPNETCORE_URLS=http://+:8080
      - ASPNETCORE_HTTP_PORTS=8080
    ports:
      - "${DOT_NET_PORT}:8080"
    networks:
      - dev

  tests:
    image: ${DOCKER_REGISTRY-}contlollers
    build:
      context: .
      dockerfile: contlollers/Dockerfile
    command: ["dotnet", "test", "--logger:console;verbosity=detailed"]
    volumes:
      - shared-volume:/shared/volume
    depends_on:
      postgis:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - dev

  postgis:
    image: postgis/postgis:17-3.5
    container_name: postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "pg_isready -U ${POSTGRES_USER} -h ${POSTGRES_HOST} -d ${POSTGRES_DB}",
        ]
      interval: 10s
      retries: 5
      start_period: 10s
      timeout: 5s
    volumes:
      - db-data:/var/lib/postgresql/data
    ports:
      - "${POSTGRES_PORT}:5432"
    networks:
      - dev
    restart: unless-stopped

  mailpit:
    image: axllent/mailpit:v1.27.9
    container_name: mailpit-dev
    ports:
      - ${MAILPIT_PORT:-63854}:8025
      - "1025:1025"
    networks:
      - dev
    restart: unless-stopped

  redis:
    image: redis:8.2
    container_name: redis-dev
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 5s
    ports:
      - ${REDIS_PORT:-63852}:6379
    volumes:
      - redis-data:/data
    networks:
      - dev
    restart: unless-stopped

  web:
    image: nginx
    container_name: nginx-dev
    volumes:
      - ./templates:/etc/nginx/templates
    ports:
      - "${NGINX_PORT}:80"
    environment:
      - NGINX_HOST=foobar.com
      - NGINX_PORT=80
    restart: unless-stopped

  client:
    build:
      context: ./Client
      dockerfile: Dockerfile
      args:
        BUILD_CONFIGURATION: Debug
    ports:
      - "4000:4000"
    volumes:
      - ./Client:/app
      - /app/node_modules
      - shared-volume:/shared/volume
    environment:
      NODE_ENV: development
    stdin_open: true
    tty: true
    networks:
      - dev
